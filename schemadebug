====================================
Schema {
  obj: {
    salon_id: { type: [Function: Number], required: true },
    name: {
      type: [Function: String],
      required: true,
      trim: true,
      minlength: 3,
      maxlength: 10
    },
    description: {
      type: [Function: String],
      required: true,
      minlength: 10,
      maxlength: 1000
    },
    address: { type: [Function: String], minlength: 3, required: true },
    phone_number: { type: [Function: String], required: true },
    subscription: { type: [Function: Boolean], required: true },
    password: { type: [Function: String], required: true, minlength: 8 },
    email: { type: [Function: String], required: true, trim: true },
    dated: { type: [Function: Date], default: [Function: now] }
  },
  paths: {
    salon_id: SchemaNumber {
      path: 'salon_id',
      instance: 'Number',
      validators: [Array],
      getters: [],
      setters: [],
      _presplitPath: [Array],
      options: [SchemaNumberOptions],
      _index: null,
      isRequired: true,
      requiredValidator: [Function (anonymous)],
      originalRequiredValue: true,
      [Symbol(mongoose#schemaType)]: true
    },
    name: SchemaString {
      enumValues: [],
      regExp: null,
      path: 'name',
      instance: 'String',
      validators: [Array],
      getters: [],
      setters: [Array],
      _presplitPath: [Array],
      options: [SchemaStringOptions],
      _index: null,
      isRequired: true,
      requiredValidator: [Function (anonymous)],
      originalRequiredValue: true,
      minlengthValidator: [Function (anonymous)],
      maxlengthValidator: [Function (anonymous)],
      [Symbol(mongoose#schemaType)]: true
    },
    description: SchemaString {
      enumValues: [],
      regExp: null,
      path: 'description',
      instance: 'String',
      validators: [Array],
      getters: [],
      setters: [],
      _presplitPath: [Array],
      options: [SchemaStringOptions],
      _index: null,
      isRequired: true,
      requiredValidator: [Function (anonymous)],
      originalRequiredValue: true,
      minlengthValidator: [Function (anonymous)],
      maxlengthValidator: [Function (anonymous)],
      [Symbol(mongoose#schemaType)]: true
    },
    address: SchemaString {
      enumValues: [],
      regExp: null,
      path: 'address',
      instance: 'String',
      validators: [Array],
      getters: [],
      setters: [],
      _presplitPath: [Array],
      options: [SchemaStringOptions],
      _index: null,
      minlengthValidator: [Function (anonymous)],
      isRequired: true,
      requiredValidator: [Function (anonymous)],
      originalRequiredValue: true,
      [Symbol(mongoose#schemaType)]: true
    },
    phone_number: SchemaString {
      enumValues: [],
      regExp: null,
      path: 'phone_number',
      instance: 'String',
      validators: [Array],
      getters: [],
      setters: [],
      _presplitPath: [Array],
      options: [SchemaStringOptions],
      _index: null,
      isRequired: true,
      requiredValidator: [Function (anonymous)],
      originalRequiredValue: true,
      [Symbol(mongoose#schemaType)]: true
    },
    subscription: SchemaBoolean {
      path: 'subscription',
      instance: 'Boolean',
      validators: [Array],
      getters: [],
      setters: [],
      _presplitPath: [Array],
      options: [SchemaTypeOptions],
      _index: null,
      isRequired: true,
      requiredValidator: [Function (anonymous)],
      originalRequiredValue: true,
      [Symbol(mongoose#schemaType)]: true
    },
    password: SchemaString {
      enumValues: [],
      regExp: null,
      path: 'password',
      instance: 'String',
      validators: [Array],
      getters: [],
      setters: [],
      _presplitPath: [Array],
      options: [SchemaStringOptions],
      _index: null,
      isRequired: true,
      requiredValidator: [Function (anonymous)],
      originalRequiredValue: true,
      minlengthValidator: [Function (anonymous)],
      [Symbol(mongoose#schemaType)]: true
    },
    email: SchemaString {
      enumValues: [],
      regExp: null,
      path: 'email',
      instance: 'String',
      validators: [Array],
      getters: [],
      setters: [Array],
      _presplitPath: [Array],
      options: [SchemaStringOptions],
      _index: null,
      isRequired: true,
      requiredValidator: [Function (anonymous)],
      originalRequiredValue: true,
      [Symbol(mongoose#schemaType)]: true
    },
    dated: SchemaDate {
      path: 'dated',
      instance: 'Date',
      validators: [],
      getters: [],
      setters: [],
      _presplitPath: [Array],
      options: [SchemaDateOptions],
      _index: null,
      defaultValue: [Function: now],
      [Symbol(mongoose#schemaType)]: true
    },
    _id: SchemaObjectId {
      path: '_id',
      instance: 'ObjectId',
      validators: [],
      getters: [],
      setters: [Array],
      _presplitPath: [Array],
      options: [SchemaObjectIdOptions],
      _index: null,
      defaultValue: [Function],
      [Symbol(mongoose#schemaType)]: true
    }
  },
  aliases: {},
  subpaths: {},
  virtuals: {},
  singleNestedPaths: {},
  nested: {},
  inherits: {},
  callQueue: [],
  _indexes: [],
  _searchIndexes: [],
  methods: {},
  methodOptions: {},
  statics: {},
  tree: {
    salon_id: { type: [Function: Number], required: true },
    name: {
      type: [Function: String],
      required: true,
      trim: true,
      minlength: 3,
      maxlength: 10
    },
    description: {
      type: [Function: String],
      required: true,
      minlength: 10,
      maxlength: 1000
    },
    address: { type: [Function: String], minlength: 3, required: true },
    phone_number: { type: [Function: String], required: true },
    subscription: { type: [Function: Boolean], required: true },
    password: { type: [Function: String], required: true, minlength: 8 },
    email: { type: [Function: String], required: true, trim: true },
    dated: { type: [Function: Date], default: [Function: now] },
    _id: { auto: true, type: 'ObjectId' }
  },
  query: {},
  childSchemas: [],
  plugins: [],
  '$id': 1,
  mapPaths: [],
  s: { hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} } },
  _userProvidedOptions: {},
  options: {
    strict: true,
    strictQuery: false,
    bufferCommands: true,
    capped: false,
    versionKey: '__v',
    optimisticConcurrency: false,
    minimize: true,
    autoIndex: null,
    discriminatorKey: '__t',
    shardKey: null,
    read: null,
    validateBeforeSave: true,
    validateModifiedOnly: false,
    _id: true,
    id: true,
    typeKey: 'type'
  }
}