const http = require("http");
const server = http.createServer((req,res) =>{
    if (req.url === "/)
    {
        res.write("<h1>Welcome to NODE JS</h1>);
        res.end();
    }
});
const PORT = 5000;
server.listen(PORT,() =>console.log('Server is running on port ${PORT}'))
This setup allows your Node.js app to interact with a MongoDB instance running in a Docker container : 
To connect your Node.js application with MongoDB, you can use the mongoose library.
1. Install Mongoose:
    npm install mongoose
2. Set Up Mongoose Connection:
    2-1) import moongose :
        const mongoose = require('mongoose');
    2-2) config URL
        const mongoURI = 'mongodb://localhost:27017/mydatabase';
        // Replace with your MongoDB URI
        example:
            const url = 'mongodb://mongo:27017/docker-node-mongo';
    
    const mongoose = require('mongoose');
    const url = 'mongodb://mongo:27017/docker-node-mongo';
    const connectDB = async () => {
        try {
            await mongoose.connect(url);
            console.log('Connected to MongoDB');
        } catch (error) {
            console.error('Error connecting to MongoDB:', error);
        }
    };

    module.exports = connectDB;

3. Define a Mongoose Schema:
    You can define a schema to represent the structure of your MongoDB documents. For example, if you have a User collection:
    const userSchema = new mongoose.Schema({
      name: String,
      email: String,
      password: String,
      createdAt: { type: Date, default: Date.now }
    });
    const User = mongoose.model('User', userSchema);
